//
//  ExhibitionsListViewController.swift
//  UranTestTask
//
//  Created by Mac on 4/14/18.
//  Copyright (c) 2018 Kovtun. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ExhibitionsListDisplayLogic: class {
    func displayObjectsList(viewModel: ExhibitionsList.Model.ViewModel)
}

class ExhibitionsListViewController: UITableViewController {
    var interactor: ExhibitionsListBusinessLogic?
    var router: (NSObjectProtocol & ExhibitionsListRoutingLogic & ExhibitionsListDataPassing)?

    fileprivate var objectsArray = [ExhibitionsList.Model.ViewModel.Object]()
    
    fileprivate var numberRow = 7
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = ExhibitionsListInteractor()
        let presenter = ExhibitionsListPresenter()
        let router = ExhibitionsListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.tableView.tableFooterView = UIView(frame: .zero)
        self.interactor?.getObjectsList()
        if let recogn = self.view.gestureRecognizers?.first{
            recogn.delegate = self
        }
    }
    
    func displaySomething(viewModel: ExhibitionsList.Model.ViewModel) {
        //nameTextField.text = viewModel.name
    }
}

extension ExhibitionsListViewController{
    // MARK: UITableViewDataSource
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return objectsArray.count
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: String(describing: ObjectTableViewCell.self), for: indexPath) as! ObjectTableViewCell
        cell.titleLabel.text = objectsArray[indexPath.row].name
        cell.imagesUrl = objectsArray[indexPath.row].imagesUrl
        return cell
    }
}

extension ExhibitionsListViewController: ExhibitionsListDisplayLogic{
    func displayObjectsList(viewModel: ExhibitionsList.Model.ViewModel) {
        objectsArray = viewModel.objects ?? [ExhibitionsList.Model.ViewModel.Object]()
        self.tableView.reloadData()
    }
}

extension ExhibitionsListViewController: UIGestureRecognizerDelegate{
    func gestureRecognizer(_ gestureRecognizer: UIGestureRecognizer, shouldReceive touch: UITouch) -> Bool {
    if touch.view is UICollectionViewCell{
        self.tableView.isScrollEnabled = false
        return false
    }
     self.tableView.isScrollEnabled = true
        return true
    }
}
